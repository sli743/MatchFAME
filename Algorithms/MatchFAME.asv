% MatchFAME
% Author: Shaohan Li
% Â© Regents of the University of Minnesota. All rights reserved
% Input Parameters: 
% Z: Initialization of pairwise matching matrix
% dimPerm: Number of keypoints in each image
% AdjMat: Adjacency matrix of the viewing graph
% n: estimated universe size
% Use n = 2*d as universe size for small data or synthetic data (such as EPFL), 16*d for large
% data (such as Photo Tourism), where d is the mean number of keypoints in
% each image
% gamma, eps: parameters
% gamma = 20 for synthetic data, gamma = 4 for real data
% varargin: use 'dense' for EPFL experiment where a denser initialization
% is necessary; otherwise leave empty
% Output: P: Estimated absolute partial permutation
function [P] = MatchFAME(Z,dimPerm,AdjMat,n,gamma,varargin)
dimPerm = reshape(dimPerm,length(dimPerm),1);
cumIndex = cumsum([0;dimPerm])';
ncams = length(dimPerm);
%% Set diagonal Blocks to zero
Z = Z-diag(diag(Z));
%% CEMP-Partial
S0 = CEMP_partial(Z, dimPerm', length(dimPerm), AdjMat);
S0(isnan(S0))=1;
if length(varargin)==1 && strcmp(varargin{1}, 'dense')
    P_init = MinimumSpanningTree_dense(sparse(S0),dimPerm',n,ncams,sparse(AdjMat),Z);
else
    P_init = MinimumSpanningTree(sparse(S0),dimPerm',n,ncams,sparse(AdjMat),Z);
end
P = P_init;
Z = sparse(Z);
Z = Block_multiply(Z,cumIndex,exp(-gamma*S0));
Z = Z + speye(size(Z,1));
Z = row_normalize(Z);
for t=1:60
    P = Z*P;
    P(P<eps) = 0;
    for i=1:ncams
        P(cumIndex(i)+1:cumIndex(i+1),:) = matrix2permutation(P(cumIndex(i)+1:cumIndex(i+1),:).*(P(cumIndex(i)+1:cumIndex(i+1),:) > eps));
    end
end